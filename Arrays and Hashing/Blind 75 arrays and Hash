# checking if an array of intergers contains duplicate
class Solution:
    def containsDuplicate(self,nums: list[int]) -> bool:
        hashset = set()

        for n in nums:
            if n in hashset:
                return True
            hashset.add (n)
        return False


# valid Anagram
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:


        if len(s) != len(t):
            return False

        countS, countT = {}, {}

        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countS[t[i]] = 1 + countS.get( t[i], 0 )

        for c in countS:
            if countS[c] != countT.get(c,0):
                return False

        return True


# producing O(1) time complexity solution
# sorted order 
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)



# Two sum
class Solution:
    def twoSum(self, nums: list[int], target: int) -> list[int]:
        prevMap = {} # val : index

        for i , n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return[prevMap[diff], i]
            prevMap[n] = i

        return


# group anagrams, catergorizing string by count
class Solution:
    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:
        res = defaultdict(list) # mapping charcount to list of anagrams

        for s in strs:
            count = [0] * 26 # a .... z

            for c in s:
                count[ord(c) - ord('a')] += 1

            res[tuple(count)].append(s)

        return res.value()
        O(m*n)


#Top K frequent elements
# bucket sort
class Solution:
    def topKFrequennt(self, nums: list[int], k:int) -> list[int]:
        count = {}
        frequency = [[] for i in range(len(nums) + 1)]

        for n in nums:
            count[n] = 1 + count.get(n, 0)
        for n , c in count.items():
            frequency[c].append(n)

        res = []
        for i in range(len(frequency) -1, 0, -1):
            for n in frequency[i]:
                res.append(n)

                if len(res) == k:
                    return res
                

# product of array except self
class Solution:
    def productExceptSelf(self, num: List[int]) -> List[int]:
        res = [1] * (len(num))

        prefix = 1
        for i in range(len(num)):
            res[i] = prefix
            prefix *= num[i]

        postfix = 1
        for i in range(len(num)-1, -1, -1):
            res[i] *= postfix
            postfix *= num[i]
        return res
    

# encoding and decoding strings
class Solution:
    """@param: strs: a list of strings
    @return: encodes a list of strings to a single string"""

    def encode(self, strs):
        result = " "
        for s in str:
            result += str(len(s)) + "#" + s
        
        return result
    
    
    """@param: str: A string
        @return: decodes a single string to a list of strings"""

    def decode(self, str):
        result, i = [], 0

        while i < len(str):
            j = i
            while str[j] != "#":
                j += 1
                length = int(str[i:j])
                result.append(str[j+1: j+1+length])
                i = j + 1 + length

# longest consecutive sequence
class Solution:
    def longestConsecutive(self, nums: List(int)) -> int:
        numSet = set(nums)
        longest = 0

        for i in nums:
            # check if its a start of a sequesnce
            if (n-1) not in numSet:
                length = 0
                while ( n + length ) in numSet:
                    length += 1
                longest = max(length , longest)
        return longest













                       











