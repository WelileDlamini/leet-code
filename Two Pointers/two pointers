 # A valid Palindrome
class Solution:
    def isPalindrome(self, s: str) -> bool:
        newStr = " "
     
        for c in s:
            if c.isalnum():
                newStr += c.lower()

        return newStr == newStr[::-1]
         
# O(1) constant memory
class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1

        while l < r:
            while l < r and not self.alphaNum(s[l]):
                l += 1
            while r < l and not self.alphaNum(s[r]):
                   r -= 1
        
            if s[l].lower() != s[r].lower():
                   return False
            l,r = l + 1, r - 1
            
        return True
              


    
    
    def alphaNum(self, c):
        return  (ord('A')) <= ord(c) <= ord('Z') or ord('a') <= ord(c) <= ord('z') or ord('0') <= ord(c) <= ord('9'))
        
# 3Sum
class Solution:
     def threeSum(self, nums: List[int]) -> List[List[int]]:
          res =[]
          nums.sort()


          for i, a in a in enumerate(nums):
               if i > 0 and a == nums[i - 1]:
                    continue
          l,r = i+l , len(nums)- 1
          while l<r:
               threeSum = a + nums[l] + nums[r]
               if threeSum > 0:
                    r -= 1
               elif threeSum < 0:
                    l += 1
               else:
                    res.append[a, nums[l], nums[r]]
                    l += 1
                    while nums[l] == nums[l -1] and l < r:
                         l += 1
          return res



# container with most water -> O(n squared)

class Solution:
     def maxArea(self, height: List[int]) -> int:
          # Brute Force
        res = 0

        #   for l in range(len(height)):
        #        for r in range(l + 1, len(height)):
        #             area = (r-l) * min(height[l], height[r])
        #             res = max(res, area)

        #   return res

        # actual linear time solution: O(n) solution

        l,r = 0, len(height) - 1
        while l < r:
             area = (r - l) * min(height[l] , height[r])
             res = max(res, area)

             if height[l] < height[r]:
                 l += 1

             else:
                  r -= 1

        return res
                  


             
             

        



                    
                    


               


               

          
               




